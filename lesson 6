TASK 1

#Создать класс TrafficLight (светофор) и определить у него один атрибут color (цвет) и метод running (запуск). Атрибут реализовать как приватный. 
#В рамках метода реализовать переключение светофора в режимы: красный, желтый, зеленый. 
#Продолжительность первого состояния (красный) составляет 7 секунд, второго (желтый) — 2 секунды, третьего (зеленый) — на ваше усмотрение. 
#Переключение между режимами должно осуществляться только в указанном порядке (красный, желтый, зеленый). 
#Проверить работу примера, создав экземпляр и вызвав описанный метод.

import time


class TrafficLight:
    __color: str

    def __init__(self, color):
        self.__color = color

    def running(self):
        print(f"{self.__color}")

counter = 0

while counter < 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:
    light = TrafficLight("red")
    light.running()
    time.sleep(7)
    light1 = TrafficLight("yellow")
    light1.running()
    time.sleep(2)
    light2 = TrafficLight("green")
    light2.running()
    time.sleep(5)
    

TASK 2
    
#Реализовать класс Road (дорога), в котором определить атрибуты: length (длина), width (ширина). 
#Значения данных атрибутов должны передаваться при создании экземпляра класса. Атрибуты сделать защищенными.
#Определить метод расчета массы асфальта, необходимого для покрытия всего дорожного полотна. 
#Использовать формулу: длина*ширина*масса асфальта для покрытия одного кв метра дороги асфальтом, толщиной в 1 см*число см толщины полотна. Проверить работу метода.

class Road:
    _length: int
    _width: int

    def __init__(self, length, width, weight_1m2x1smthickness, thickness):
        self._length = length
        self._width = width
        self.weight_1m2x1smthickness = weight_1m2x1smthickness
        self.thickness = thickness

    def count(self):
        itog = self._length * self._width * self.weight_1m2x1smthickness * self.thickness
        print(itog)

trassa = Road(5000, 20, 25, 5)
trassa.count()

TASK 3

#Реализовать базовый класс Worker (работник), в котором определить атрибуты: name, surname, position (должность), income (доход). 
#Последний атрибут должен быть защищенным и ссылаться на словарь, содержащий элементы: оклад и премия, например, {"wage": wage, "bonus": bonus}.
#Создать класс Position (должность) на базе класса Worker. 
#В классе Position реализовать методы получения полного имени сотрудника (get_full_name) и дохода с учетом премии (get_total_income). 
#Проверить работу примера на реальных данных (создать экземпляры класса Position, передать данные, проверить значения атрибутов, вызвать методы экземпляров).

class Worker:
    name: str
    surname: str
    position: str
    _income: {}

    def __init__(self, name, surname, position, wage, bonus):
        self.name = name
        self.surname = surname
        self.position = position
        self._income = {"wage": wage, "bonus": bonus}


class Position(Worker):
    def get_full_name(self):
        print(f"{self.name}, {self.surname}, {self.position}")

    def get_total_income(self):
        total = self._income.get('wage') + self._income.get('bonus')
        print(total)


John = Position("john", "malkov", "superviser", 1000, 100)
John.get_full_name()
John.get_total_income()

TASK 4-5

#Реализуйте базовый класс Car. У данного класса должны быть следующие атрибуты: speed, color, name, is_police (булево).
#А также методы: go, stop, turn(direction), которые должны сообщать, что машина поехала, остановилась, повернула (куда).
#Опишите несколько дочерних классов: TownCar, SportCar, WorkCar, PoliceCar. Добавьте в базовый класс метод show_speed, который должен показывать текущую скорость автомобиля.
#Для классов TownCar и WorkCar переопределите метод show_speed. При значении скорости свыше 60 (TownCar) и 40 (WorkCar) должно выводиться сообщение о превышении скорости.

class Car:
    speed: int
    color: str
    name: str
    is_police: bool

    def __init__(self, speed, color, name, is_police):
        self.speed = speed
        self.color = color
        self.name = name
        self.is_police = is_police

    def go(self):
        print("Car go")

    def stop(self):
        print("Car stop")

    def turn(self):
        print("Car turn")

    def show_speed(self):
        print(f"Speed = {self.speed}")


class TownCar(Car):

    def info(self):
        print(f"{self.speed}, {self.color}, {self.name}, {self.is_police}")

    def show_speed(self):
        if self.speed > 60:
            print("Вы превысили скорость!")


class SportCar(Car):

    def info(self):
        print(f"{self.speed}, {self.color}, {self.name}, {self.is_police}")


class WorkCar(Car):

    def info(self):
        print(f"{self.speed}, {self.color}, {self.name}, {self.is_police}")

    def show_speed(self):
        if self.speed > 40:
            print("Вы превысили скорость!")


class PoliceCar(Car):
    def info(self):
        print(f"{self.speed}, {self.color}, {self.name}, {self.is_police}")

print("Ёкарный бабай Лёха. Жми!")
driver = WorkCar(50, "blue", "scania", False)
driver.go()
driver.stop()
driver.turn()
driver.info()
driver.show_speed()

print()
print("Спортивная виувика")
driver1 = SportCar(90, "yellow", "mazda", False)
driver1.go()
driver1.stop()
driver1.turn()
driver1.info()
driver1.show_speed()

print()
print("Городская бибика")
driver2 = TownCar(75, "green", "mini_cooper", False)
driver2.go()
driver2.stop()
driver2.turn()
driver2.info()
driver2.show_speed()

print()
print("Только не дубинкой, ай, больно")
driver3 = PoliceCar(250, "rainbow", "avtozak", True)
driver3.go()
driver3.stop()
driver3.turn()
driver3.info()
driver3.show_speed()
