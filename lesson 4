SCRIPT

def sal():
    try:
        time = float(input('Выработка в часах '))
        salary = int(input('Ставка в у.е. '))
        bonus = int(input('Премия в у.е. '))
        res = time * salary + bonus
        print(f'заработная плата сотрудника  {res}')
    except ValueError:
        return print('Not a number')
sal()

TASK 1

#Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. 
#В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия. 
#Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from lesson4.homework4 import script

time, salary, bonus = script
try:
    time = int(time)
    salary = int(salary)
    bonus = int(bonus)
    res = time * salary + bonus
    print(f'заработная плата сотрудника  {res}')
except ValueError:
    print('Not a number')
    
TASK 2
    
#Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
    
from random import randrange
numbers = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
a = [int(i) for i in numbers]
for i in range(1, len(a)):
    if a[i] > a[i - 1]:
        print(a[i])
       
TASK 3
       
#Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
       
numbers = [f"{x}" for x in range(20, 240) if x % 20 == 0 or x % 21 == 0]
print(numbers)

TASK 4
    
#Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию. 
#Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
    
my_list = [1, 4, 4, 2, 3, 2, 8, 10, 8, 5]
my_new_list = [el for el in my_list if my_list.count(el) != 2]
print(my_new_list)

 TASK 5
    
 #Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы). 
 #Необходимо получить результат вычисления произведения всех элементов списка.
 
 from functools import reduce

def my_func(prev_el, el):
    return prev_el * el

#print([el for el in range(99, 1001) if el % 2 == 0])

print(reduce(my_func, [el for el in range(99, 1000) if el % 2 == 0]))

TASK 6

#Реализовать два небольших скрипта:
#а) итератор, генерирующий целые числа, начиная с указанного,
#б) итератор, повторяющий элементы некоторого списка, определенного заранее.

from itertools import count

for el in count(3):
    if el > 7:
        break
    else:
        print(el)

from itertools import cycle

с = 0
for x in cycle("GEEK"):
    if с > 11:
        break
    print(x)
    
TASK 7

#Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. 
#Функция должна вызываться следующим образом: for el in fact(n). 
#Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.

from itertools import count
from math import factorial

def generation():
    for el in count(1):
        yield factorial(el)

gen = generation()
x = 0
for i in gen:
    if x < 6:
        print(i)
        x += 1
    else:
        break
